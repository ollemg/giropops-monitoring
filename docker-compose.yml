version: '3.3'

services:

  prometheus:
    image: ollemg/prometheus_alpine
    volumes:
      - ./conf/prometheus/:/etc/prometheus/
      - prometheus_data:/var/lib/prometheus
    networks:
    deploy:
      mode: replicated
      backend:
    ports:
      - 9090:9090

  node-exporter:
    image: ollemg/node-exporter_alpine
    hostname: '{{.Node.ID}}'
    volumes:
      - /proc:/usr/proc
      - /sys:/usr/sys
      - /:/rootfs
    deploy:
      mode: global
    networks:
      backend:
    ports:
      - 9100:9100

  alertmanager:
    image: ollemg/alertmanager_alpine
    hostname: '{{.Node.ID}}'
    volumes:
      - ./conf/alertmanager/:/etc/alertmanager/
    deploy:
      mode: global
    networks:
      backend:
    ports:
      - 9093:9093

  cadvisor:
    image: google/cadvisor
    hostname: '{{.Node.ID}}'
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      backend:
    deploy:
      mode: global
    ports:
      - 8080:8080

  grafana:
    image: nopp/grafana_alpine
    depends_on:
      - prometheus
    volumes:
      - ./conf/grafana/grafana.db:/grafana/data/grafana.db
    env_file:
      - grafana.config
    deploy:
      mode: replicated
    networks:
      backend:
      frontend:
    ports:
      - 3000:3000

  agent:
    image: portainer/agent
    environment:
      AGENT_CLUSTER_ADDR: tasks.agent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - agent_network
    deploy:
      mode: global
      placement:
        constraints: [node.platform.os == linux]

  portainer:
    image: portainer/portainer
    command: -H tcp://tasks.agent:9001 --tlsskipverify
    ports:
      - "9000:9000"
    volumes:
      - portainer_data:/data
    networks:
      - agent_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
    driver: overlay
  backend:
    driver: overlay
  agent_network:
    driver: overlay
    attachable: true

volumes:
    prometheus_data:
    grafana_data:
    portainer_data: